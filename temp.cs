using System;
using System.Diagnostics;



namespace OSS_Project
{
    public  struct feature
    {
        public static string MachineIdentifier = " ";
        public static string ProductName = "powershell\n (Get-ComputerInfo).WindowsProductName";
        public static string EngineVersion = "powershell\n  (Get-ItemProperty -path registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Defender\\Signature Updates\").EngineVersion";
        public static string AppVersion = "powershell\n  (Get-MpComputerStatus).AMProductVersion |Select -First 1";
        public static string AvSigVersion = "powershell\n (Get-ItemProperty -path registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Defender\\Signature Updates\").AVSignatureVersion";
        public static string IsBeta = " ";
        public static string RtpStateBitfield = " ";
        public static string IsSxsPassiveMode = "sc query Windefend | find /i \"RUNNING\"";
        public static string DefaultBrowsersIdentifier = "";
        public static string AVProductStatesIdentifier = " ";
        public static string AVProductsInstalled = "powershell\n (Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).displayName";
        public static string AVProductsEnabled = "powershell\n (Get-MpComputerStatus).AntivirusEnabled |Select -First 1";
        public static string HasTpm = "powershell\n (Get-Tpm).Tpmready";
        public static string CountryIdentifier = "powershell\n (Get-WmiObject win32_operatingsystem).CountryCode";
        public static string CityIdentifier = " ";
        public static string OrganizationIdentifier = " ";
        public static string GeoNameIdentifier = " ";
        public static string LocaleEnglishNameIdentifier = "powershell\n (Get-WinHomeLocation).GeoId";
        public static string Platform = "powershell\n (Get-ComputerInfo).WindowsProductName";
        public static string Processor = "powershell\n  (Get-ComputerInfo).OsArchitecture";
        public static string OsVer = "powershell\n  (Get-wmiobject win32_operatingsystem).Version";
        public static string OsBuild = "powershell\n (Get-ComputerInfo).OsBuildNumber";
        public static string OsSuite = "powershell\n (Get-wmiobject win32_operatingsystem).OSProductSuite";
        public static string OsPlatformSubRelease = "powershell\n (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildBranch";
        public static string OsBuildLab = "powershell\n (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildLabEx";
        public static string SkuEdition = "powershell\n  (Get-wmiobject win32_operatingsystem).Caption";
        public static string IsProtected = "powershell\n  (Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).productState";
        public static string AutoSampleOptIn = "powershell\n (Get-MpPreference).SubmitSamplesConsent";
        public static string PuaMode = "powershell\n (Get-MpPreference).PUAProtection";
        public static string SMode = "powershell\n (Get-wmiobject win32_operatingsystem).Caption";
        public static string IeVerIdentifier = " ";
        public static string SmartScreen = "powershell\n (Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer).SmartScreenEnabled";
        public static string Firewall = "powershell\n (Get-NetFirewallProfile -Profile private).Enabled";
        public static string UacLuaenable = "powershell\n (Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System).EnableLUA";
        public static string Census_MDC2FormFactor = " ";
        public static string Census_DeviceFamily = "powershell\n (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").InstallationType";
        public static string Census_OEMNameIdentifier = " ";
        public static string Census_OEMModelIdentifier = " ";
        public static string Census_ProcessorCoreCount = "powershell\n (Get-WmiObject Win32_Processor).numberoflogicalprocessors";
        public static string Census_ProcessorManufacturerIdentifier = " ";
        public static string Census_ProcessorModelIdentifier = " ";
        public static string Census_ProcessorClass = "powershell\n (get-wmiObject win32_processor).Name";
        public static string Census_PrimaryDiskTotalCapacity = " ";
        public static string Census_PrimaryDiskTypeName = " ";
        public static string Census_SystemVolumeTotalCapacity = " ";
        public static string Census_HasOpticalDiskDrive = "powershell\n wmic cdrom get status";
        public static string Census_TotalPhysicalRAM = "powershell\n  (Get-WmiObject win32_operatingsystem).totalvisibleMemorysize";
        public static string Census_ChassisTypeName = " ";
        public static string Census_InternalPrimaryDiagonalDisplaySizeInInches = " ";
        public static string Census_InternalPrimaryDisplayResolutionHorizontal = "powershell\n (Get-WmiObject win32_videocontroller).CurrentHorizontalResolution";
        public static string Census_InternalPrimaryDisplayResolutionVertical = "powershell\n (Get-WmiObject win32_videocontroller).CurrentVerticalResolution";
        public static string Census_PowerPlatformRoleName = "powershell\n  (Get-ComputerInfo).PowerPlatformRole";
        public static string Census_InternalBatteryType = " ";
        public static string Census_InternalBatteryNumberOfCharges = " ";
        public static string Census_OSVersion = "powershell\n  (Get-ItemProperty -Path c:\\windows\\system32\\hal.dll).VersionInfo.ProductVersion";
        public static string Census_OSArchitecture = "echo %PROCESSOR_ARCHITECTURE%";
        public static string Census_OSBranch = "powershell\n (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildBranch";
        public static string Census_OSBuildNumber = "powershell\n (Get-WmiObject -class Win32_OperatingSystem).BuildNumber";
        public static string Census_OSBuildRevision = "powershell\n  (Get-ItemProperty -Path c:\\windows\\system32\\hal.dll).VersionInfo.ProductVersion";
        public static string Census_OSEdition = "powershell\n (Get-ComputerInfo).WindowsEditionId";
        public static string Census_OSSkuName = "powershell\n (Get-ComputerInfo).WindowsEditionId";
        public static string Census_OSInstallTypeName = " ";
        public static string Census_OSInstallLanguageIdentifier = " ";
        public static string Census_OSUILocaleIdentifier = " ";
        public static string Census_OSWUAutoUpdateOptionsName = "powershell\n (new-object -com \"Microsoft.Update.AutoUpdate\").Settings.NotificationLevel";
        public static string Census_IsPortableOperatingSystem = "powershell\n (Get-WmiObject Win32_Operatingsystem).PortableOperatingSystem";
        public static string Census_GenuineStateName = "powershell\n (Get-CimInstance SoftwareLicensingProduct -Filter \"Name like 'Windows%'\" | where { $_.PartialProductKey }).GenuineStatus";
        public static string Census_ActivationChannel = "powershell\n  (Get-CimInstance SoftwareLicensingProduct -Filter \"Name like 'Windows%'\" | where { $_.PartialProductKey }).ProductKeyChannel";
        public static string Census_IsFlightingInternal = " ";
        public static string Census_IsFlightsDisabled = "powershell\n (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").EnablePreviewBuilds";
        public static string Census_FlightRing = "powershell\n (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").Ring";
        public static string Census_ThresholdOptIn = "powershell\n (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").ThresholdOptedin";
        public static string Census_FirmwareManufacturerIdentifier = " ";
        public static string Census_FirmwareVersionIdentifier = " ";
        public static string Census_IsSecureBootEnabled = " ";
        public static string Census_IsWIMBootEnabled = "powershell\n dism.exe /Get-MountedWimInfo /English | Select-string \"Mounted images:\"";
        public static string Census_IsVirtualDevice = "powershell\n (Get-MpComputerStatus).IsVirtualMachine";
        public static string Census_IsTouchEnabled = "powershell\n  Get-PnpDevice | Where-Object {$_.FriendlyName -like '*touch screen*'}";
        public static string Census_IsPenCapable = "powershell\n  Get-PnpDevice | Where-Object {$_.FriendlyName -like '*pen*'}";
        public static string Census_IsAlwaysOnAlwaysConnectedCapable = "powershell\n (get-wmiobject win32_SystemResources).\"Connect Standby Capable\"";
        public static string Wdft_IsGamer = " ";
        public static string Wdft_RegionIdentifier = " ";
        public static string HasDetections = " ";


    }


    public static class Program
    {
        static string directory = "C:\\MP\\";

        static void Main(string[] args)
        {
            string str = feature.Census_IsAlwaysOnAlwaysConnectedCapable;
            Ex_cmd(str);

        }



        public static void Ex_cmd(string str) //excute cmd
        {
            ProcessStartInfo proinfo = new ProcessStartInfo();
            Process pro = new Process();
            string str_ret = "";
            try
            {
                proinfo.FileName = @"cmd";
                proinfo.CreateNoWindow = true;
                proinfo.UseShellExecute = false;
                proinfo.RedirectStandardOutput = true;
                proinfo.RedirectStandardInput = true;
                proinfo.RedirectStandardError = true;
                proinfo.Verb = "runas";
                pro.StartInfo = proinfo;
                pro.Start();


                pro.StandardInput.Write(str);
                pro.StandardInput.Write(Environment.NewLine);
                pro.StandardInput.Close();

                str_ret = pro.StandardOutput.ReadToEnd();
                Console.WriteLine(str_ret);
                pro.WaitForExit();
                pro.Close();


            }
            catch (Exception e)
            {

            }
        }


    }

}
