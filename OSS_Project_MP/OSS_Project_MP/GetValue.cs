using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Threading;
using System.IO;

namespace OSS_Project_MP
{
    class GetValue
    {
		static string log_directory = Program.Pre_Dir + @"log\" + Program.Date_Now + @"\";
		static string Error_directory = Program.Pre_Dir + @"Error\" + Program.Date_Now + @"\";
		public static string[] Error_string = new string[84];
		static int Complete_Count = 0;

		public static void Ex_cmd(string str) //excute cmd
		{
			ProcessStartInfo proinfo = new ProcessStartInfo();
			Process pro = new Process();
			string str_ret = "";
			try
			{
				proinfo.FileName = @"cmd";
				proinfo.CreateNoWindow = true;
				proinfo.UseShellExecute = false;
				proinfo.RedirectStandardOutput = true;
				proinfo.RedirectStandardInput = true;
				proinfo.RedirectStandardError = true;
				proinfo.Verb = "runas";
				pro.StartInfo = proinfo;
				pro.Start();


				pro.StandardInput.Write(str);
				pro.StandardInput.Write(Environment.NewLine);
				pro.StandardInput.Close();

				str_ret = pro.StandardOutput.ReadToEnd();
				Console.WriteLine(str_ret);
				pro.WaitForExit();
				pro.Close();


			}
			catch (Exception e)
			{
				Error_string[82] = e.ToString();
			}
		}

		public static void GetValue_Process() 
        {
			Ex_func();
			while(true)
            {
				if(Complete_Count == 82)
                {

					Error_catch();
					break;
				}
            }
			EditCSV.CSV_Process();
		}

		public static void Ex_func() //excute entire function. The number of threads is used without limitation because it is for research purposes, not for commercialization.
		{
			GetValue gv = new GetValue();
			DirectoryInfo MainDirectoryInfo = new DirectoryInfo(log_directory);
			if (MainDirectoryInfo.Exists == false)
			{
				MainDirectoryInfo.Create();
			}
			ThreadPool.QueueUserWorkItem(MachineIdentifier, gv);
			ThreadPool.QueueUserWorkItem(ProductName, gv);
			ThreadPool.QueueUserWorkItem(EngineVersion, gv);
			ThreadPool.QueueUserWorkItem(AppVersion, gv);
			ThreadPool.QueueUserWorkItem(AvSigVersion, gv);
			ThreadPool.QueueUserWorkItem(IsBeta, gv);
			ThreadPool.QueueUserWorkItem(RtpStateBitfield, gv);
			ThreadPool.QueueUserWorkItem(IsSxsPassiveMode, gv);
			ThreadPool.QueueUserWorkItem(DefaultBrowsersIdentifier, gv);
			ThreadPool.QueueUserWorkItem(AVProductStatesIdentifier, gv);
			ThreadPool.QueueUserWorkItem(AVProductsInstalled, gv);
			ThreadPool.QueueUserWorkItem(AVProductsEnabled, gv);
			ThreadPool.QueueUserWorkItem(HasTpm, gv);
			ThreadPool.QueueUserWorkItem(CountryIdentifier, gv);
			ThreadPool.QueueUserWorkItem(CityIdentifier, gv);
			ThreadPool.QueueUserWorkItem(OrganizationIdentifier, gv);
			ThreadPool.QueueUserWorkItem(GeoNameIdentifier, gv);
			ThreadPool.QueueUserWorkItem(LocaleEnglishNameIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Platform, gv);
			ThreadPool.QueueUserWorkItem(Processor, gv);
			ThreadPool.QueueUserWorkItem(OsVer, gv);
			ThreadPool.QueueUserWorkItem(OsBuild, gv);
			ThreadPool.QueueUserWorkItem(OsSuite, gv);
			ThreadPool.QueueUserWorkItem(OsPlatformSubRelease, gv);
			ThreadPool.QueueUserWorkItem(OsBuildLab, gv);
			ThreadPool.QueueUserWorkItem(SkuEdition, gv);
			ThreadPool.QueueUserWorkItem(IsProtected, gv);
			ThreadPool.QueueUserWorkItem(AutoSampleOptIn, gv);
			ThreadPool.QueueUserWorkItem(PuaMode, gv);
			ThreadPool.QueueUserWorkItem(SMode, gv);
			ThreadPool.QueueUserWorkItem(IeVerIdentifier, gv);
			ThreadPool.QueueUserWorkItem(SmartScreen, gv);
			ThreadPool.QueueUserWorkItem(Firewall, gv);
			ThreadPool.QueueUserWorkItem(UacLuaenable, gv);
			ThreadPool.QueueUserWorkItem(Census_MDC2FormFactor, gv);
			ThreadPool.QueueUserWorkItem(Census_DeviceFamily, gv);
			ThreadPool.QueueUserWorkItem(Census_OEMNameIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_OEMModelIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_ProcessorCoreCount, gv);
			ThreadPool.QueueUserWorkItem(Census_ProcessorManufacturerIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_ProcessorModelIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_ProcessorClass, gv);
			ThreadPool.QueueUserWorkItem(Census_PrimaryDiskTotalCapacity, gv);
			ThreadPool.QueueUserWorkItem(Census_PrimaryDiskTypeName, gv);
			ThreadPool.QueueUserWorkItem(Census_SystemVolumeTotalCapacity, gv);
			ThreadPool.QueueUserWorkItem(Census_HasOpticalDiskDrive, gv);
			ThreadPool.QueueUserWorkItem(Census_TotalPhysicalRAM, gv);
			ThreadPool.QueueUserWorkItem(Census_ChassisTypeName, gv);
			ThreadPool.QueueUserWorkItem(Census_InternalPrimaryDiagonalDisplaySizeInInches, gv);
			ThreadPool.QueueUserWorkItem(Census_InternalPrimaryDisplayResolutionHorizontal, gv);
			ThreadPool.QueueUserWorkItem(Census_InternalPrimaryDisplayResolutionVertical, gv);
			ThreadPool.QueueUserWorkItem(Census_PowerPlatformRoleName, gv);
			ThreadPool.QueueUserWorkItem(Census_InternalBatteryType, gv);
			ThreadPool.QueueUserWorkItem(Census_InternalBatteryNumberOfCharges, gv);
			ThreadPool.QueueUserWorkItem(Census_OSVersion, gv);
			ThreadPool.QueueUserWorkItem(Census_OSArchitecture, gv);
			ThreadPool.QueueUserWorkItem(Census_OSBranch, gv);
			ThreadPool.QueueUserWorkItem(Census_OSBuildNumber, gv);
			ThreadPool.QueueUserWorkItem(Census_OSBuildRevision, gv);
			ThreadPool.QueueUserWorkItem(Census_OSEdition, gv);
			ThreadPool.QueueUserWorkItem(Census_OSSkuName, gv);
			ThreadPool.QueueUserWorkItem(Census_OSInstallTypeName, gv);
			ThreadPool.QueueUserWorkItem(Census_OSInstallLanguageIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_OSUILocaleIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_OSWUAutoUpdateOptionsName, gv);
			ThreadPool.QueueUserWorkItem(Census_IsPortableOperatingSystem, gv);
			ThreadPool.QueueUserWorkItem(Census_GenuineStateName, gv);
			ThreadPool.QueueUserWorkItem(Census_ActivationChannel, gv);
			ThreadPool.QueueUserWorkItem(Census_IsFlightingInternal, gv);
			ThreadPool.QueueUserWorkItem(Census_IsFlightsDisabled, gv);
			ThreadPool.QueueUserWorkItem(Census_FlightRing, gv);
			ThreadPool.QueueUserWorkItem(Census_ThresholdOptIn, gv);
			ThreadPool.QueueUserWorkItem(Census_FirmwareManufacturerIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_FirmwareVersionIdentifier, gv);
			ThreadPool.QueueUserWorkItem(Census_IsSecureBootEnabled, gv);
			ThreadPool.QueueUserWorkItem(Census_IsWIMBootEnabled, gv);
			ThreadPool.QueueUserWorkItem(Census_IsVirtualDevice, gv);
			ThreadPool.QueueUserWorkItem(Census_IsTouchEnabled, gv);
			ThreadPool.QueueUserWorkItem(Census_IsPenCapable, gv);
			ThreadPool.QueueUserWorkItem(Census_IsAlwaysOnAlwaysConnectedCapable, gv);
			ThreadPool.QueueUserWorkItem(Wdft_IsGamer, gv);
			ThreadPool.QueueUserWorkItem(Wdft_RegionIdentifier, gv);

		}

		

		public static void Error_catch() //error handling
        {
			string path = Error_directory + "Error_log.csv";
			DirectoryInfo ErrorDirectoryInfo = new DirectoryInfo(Error_directory);
			if (ErrorDirectoryInfo.Exists == false)
			{
				ErrorDirectoryInfo.Create();
			}

			
			StreamWriter sw = new StreamWriter(path);
			for (int i = 0; i<Error_string.Length; i++)
            {
				sw.WriteLine("{0}, {1}", i, Error_string[i]);
				sw.Flush();
            }

			sw.Close();
		}

		///////////////////////The code below is for feature extraction.///////////////////////

		public static void MachineIdentifier(object obj)  
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "MachineIdentifier.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + directory + "MachineIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[0] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void ProductName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ComputerInfo).WindowsProductName";
				string command = "powershell\n" + str + @" >> " + log_directory + "ProductName.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[1] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void EngineVersion(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string pre_command = "sc start windefend enable\n\n";

				string str = "(Get-MpComputerStatus).AMEngineVersion |Select -First 1";
				string command = "powershell\n" + str + @"  >> " + log_directory + "EngineVersion.txt";
				Ex_cmd(pre_command);
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[2] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void AppVersion(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{

				string pre_command = "sc start windefend enable\n\n";

				string str = " (Get-MpComputerStatus).AMProductVersion |Select -First 1";
				string command = "powershell\n" + str + @" >> " + log_directory + "AppVersion.txt";

				Ex_cmd(pre_command);
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[3] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void AvSigVersion(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string pre_command = "sc start windefend enable\n\n";

				string str = "(Get-MpComputerStatus).AntispywareSignatureVersion |Select -First 1";
				string command = "powershell\n" + str + @" >> " + log_directory + "AvSigVersion.txt";

				Ex_cmd(pre_command);
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[4] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void IsBeta(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "IsBeta.txt" + " -ItemType file";


				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "IsBeta.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[5] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void RtpStateBitfield(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "RtpStateBitfield.txt" + " -ItemType file";


				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "RtpStateBitfield.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[6] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void IsSxsPassiveMode(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "sc query Windefend | find /i \"RUNNING\"";
				string command = str + @" >> " + log_directory + "IsSxsPassiveMode.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[7] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void DefaultBrowsersIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "DefaultBrowsersIdentifier.txt" + " -ItemType file";


				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "DefaultBrowsersIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[8] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void AVProductStatesIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "AVProductStatesIdentifier.txt" + " -ItemType file";


				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "AVProductStatesIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[9] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void AVProductsInstalled(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).displayName";
				string command = "powershell\n" + str + @" >> " + log_directory + "AVProductsInstalled.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[10] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void AVProductsEnabled(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).productState";
				string command = "powershell\n" + str + @" >> " + log_directory + "AVProductsEnabled.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[11] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void HasTpm(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-Tpm).Tpmready";
				string command = "powershell\n" + str + @" >> " + log_directory + "HasTpm.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[12] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void CountryIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-WmiObject win32_operatingsystem).CountryCode";
				string command = "powershell\n" + str + @" >> " + log_directory + "CountryIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[13] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void CityIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "CityIdentifier.txt" + " -ItemType file";


				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "CityIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[14] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void OrganizationIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "OrganizationIdentifier.txt" + " -ItemType file";


				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "OrganizationIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[15] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void GeoNameIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "GeoNameIdentifier.txt" + " -ItemType file";


				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "GeoNameIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[16] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void LocaleEnglishNameIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-WinHomeLocation).GeoId";
				string command = "powershell\n" + str + @" >> " + log_directory + "LocaleEnglishNameIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[17] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Platform(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ComputerInfo).WindowsProductName";
				string command = "powershell\n" + str + @" >> " + log_directory + "Platform.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[18] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Processor(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ComputerInfo).OsArchitecture";
				string command = "powershell\n" + str + @" >> " + log_directory + "Processor.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[19] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void OsVer(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-wmiobject win32_operatingsystem).Version";
				string command = "powershell\n" + str + @" >> " + log_directory + "OsVer.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[20] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void OsBuild(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ComputerInfo).OsBuildNumber";
				string command = "powershell\n" + str + @" >> " + log_directory + "OsBuild.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[21] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void OsSuite(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-wmiobject win32_operatingsystem).OSProductSuite";
				string command = "powershell\n" + str + @" >> " + log_directory + "OsSuite.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[22] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void OsPlatformSubRelease(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = " (Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildBranch";
				string command = "powershell\n" + str + @" >> " + log_directory + "OsPlatformSubRelease.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[23] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void OsBuildLab(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildLabEx";
				string command = "powershell\n" + str + @" >> " + log_directory + "OsBuildLab.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[24] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void SkuEdition(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-wmiobject win32_operatingsystem).Caption";
				string command = "powershell\n" + str + @" >> " + log_directory + "SkuEdition.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[25] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void IsProtected(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).productState";
				string command = "powershell\n" + str + @" >> " + log_directory + "IsProtected.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[26] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void AutoSampleOptIn(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-MpPreference).SubmitSamplesConsent";
				string command = "powershell\n" + str + @" >> " + log_directory + "AutoSampleOptIn.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[27] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void PuaMode(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-MpPreference).PUAProtection";
				string command = "powershell\n" + str + @" >> " + log_directory + "PuaMode.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[28] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void SMode(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = " (Get-wmiobject win32_operatingsystem).Caption";
				string command = "powershell\n" + str + @" >> " + log_directory + "SMode.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[29] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void IeVerIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "IeVerIdentifier.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "IeVerIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[30] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void SmartScreen(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer).SmartScreenEnabled";
				string command = "powershell\n" + str + @" >> " + log_directory + "SmartScreen.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[31] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Firewall(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-NetFirewallProfile -Profile private).Enabled";
				string command = "powershell\n" + str + @" >> " + log_directory + "Firewall.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[32] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void UacLuaenable(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = " (Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System).EnableLUA";
				string command = "powershell\n" + str + @" >> " + log_directory + "UacLuaenable.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[33] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_MDC2FormFactor(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_MDC2FormFactor.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_MDC2FormFactor.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[34] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_DeviceFamily(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").InstallationType";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_DeviceFamily.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[35] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OEMNameIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_OEMNameIdentifier.txt" + " -ItemType file";
				//str = (Get-Ciminstance Win32_ComputerSystem).Manufacturer;
				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_OEMNameIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[36] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OEMModelIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_OEMModelIdentifier.txt" + " -ItemType file";
				//str = (Get-Ciminstance Win32_ComputerSystem).Model;
				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_OEMModelIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[37] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_ProcessorCoreCount(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-WmiObject Win32_Processor).numberoflogicalprocessors";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_ProcessorCoreCount.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[38] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_ProcessorManufacturerIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-Wmiobject Win32_Processor).Manufacturer";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_ProcessorManufacturerIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[39] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_ProcessorModelIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-Wmiobject Win32_Processor).Name";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_ProcessorModelIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[40] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_ProcessorClass(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(get-wmiObject win32_processor).Name";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_ProcessorClass.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[41] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_PrimaryDiskTotalCapacity(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-Disk | Where-Object IsSystem -eq $True).AllocatedSize";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_PrimaryDiskTotalCapacity.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[42] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_PrimaryDiskTypeName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string pre_str = "(Get-Disk | Where-Object IsSystem -eq $True).number ";
				string command = "powershell\n" + pre_str + @" >>" + log_directory + "temp_Census_PrimaryDiskTypeName.txt";
				Ex_cmd(command);
				string str_value = File.ReadAllText(log_directory + "temp_Census_PrimaryDiskTypeName.txt").Trim();

				string str = "(Get-PhysicalDisk | Where-Object DeviceId -eq " + str_value + " ).Mediatype";
				command = "powershell\n" + str + @" >> " + log_directory + "Census_PrimaryDiskTypeName.txt";

				Ex_cmd(command);

				File.Delete(log_directory + "temp_Census_PrimaryDiskTypeName.txt");


			}
			catch (Exception e)
			{
				Error_string[43] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_SystemVolumeTotalCapacity(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{

				string pre_str = "(Get-Partition | Where-Object Isboot -eq True).DriveLetter";
				string command = "powershell\n" + pre_str + @" >>" + log_directory + "temp_Census_SystemVolumeTotalCapacity.txt";
				Ex_cmd(command);
				string str_value = File.ReadAllText(log_directory + "temp_Census_SystemVolumeTotalCapacity.txt").Trim();

				string str = "(Get-Partition -DriveLetter " + str_value + ").size";
				command = "powershell\n" + str + @" >> " + log_directory + "Census_SystemVolumeTotalCapacity.txt";

				Ex_cmd(command);

				File.Delete(log_directory + "temp_Census_SystemVolumeTotalCapacity.txt");

			}
			catch (Exception e)
			{
				Error_string[44] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_HasOpticalDiskDrive(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_HasOpticalDiskDrive.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";

				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_HasOpticalDiskDrive.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[45] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_TotalPhysicalRAM(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-WmiObject win32_operatingsystem).totalvisibleMemorysize";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_TotalPhysicalRAM.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[46] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_ChassisTypeName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "function chasis{ $ArrChaType = \"Other\",\"Unknown\" ,\"Desktop\",\"LowProfileDesktop\",\"PizzaBox\" ,\"MiniTower\",\"Tower\",\"Portable\",\"Laptop\",\"Notebook\",\"HandHeld\",\"DockingStation\",\"AllinOne\",\"SubNotebook\",\"Spacesaving\",\"LunchBox\",\"MainServerChassis\",\"ExpansionChassis\",\"SubChassis\",";
				string str2 = "\"BusExpansionChassis\",\"PeripheralChassis\",\"RAIDChassis\",\"RackMountChassis\",\"SealedcasePC\",\"Multisystemchassis\",\"CompactPCI\",\"AdvancedTCA\",\"Blade\",\"BladeEnclosure\",\"Tablet\",\"Convertible\",\"Detachable\",\"ioTGateway\",\"EmbeddedPC\",\"MiniPC\",\"StickPC\"\n";
				string str3 = "$chaType = (Get-CimInstance -ClassName Win32_SystemEnclosure).ChassisTypes\n";
				string str4 = "for ($i=0; $i -lt 37; $i++) { if ($chaType -eq $i+1){$ArrChaType[$i]}}}\n";
				string str5 = "chasis";

				string command = "powershell\n" + str + str2 + str3 + str4 + str5 + @" >> " + log_directory + "Census_ChassisTypeName.txt" + "\n";
				Ex_cmd(command);

			}
			catch (Exception e)
			{
				Error_string[47] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_InternalPrimaryDiagonalDisplaySizeInInches(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "function get-monitorsize {Get-WmiObject -Namespace root\\wmi -Class WmiMonitorBasicDisplayParams |select  @{N=\"Computer\"; E={$_.__SERVER}},InstanceName,@{N=\"Horizonal\";\r\n";
				string str2 = "E={[System.Math]::Round(($_.MaxHorizontalImageSize/2.54), 2)}},@{N=\"Vertical\"; E={[System.Math]::Round(($_.MaxVerticalImageSize/2.54), 2)}},@{N=\"Size\"; E={[System.Math]::Round(([System.Math]::Sqrt([System.Math]::Pow($_.MaxHorizontalImageSize, 2) `\r\n";
				string str3 = "+ [System.Math]::Pow($_.MaxVerticalImageSize, 2))/2.54),2)}}}\n";
				string str4 = "(get-monitorsize).Size";
				string command = "powershell\n" + str + str2 + str3 + "\n" + str4 + @" >>" + log_directory + "Census_InternalPrimaryDiagonalDisplaySizeInInches.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[48] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_InternalPrimaryDisplayResolutionHorizontal(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-WmiObject win32_videocontroller).CurrentHorizontalResolution";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_InternalPrimaryDisplayResolutionHorizontal.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[49] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_InternalPrimaryDisplayResolutionVertical(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-WmiObject win32_videocontroller).CurrentVerticalResolution";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_InternalPrimaryDisplayResolutionVertical.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[50] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_PowerPlatformRoleName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ComputerInfo).PowerPlatformRole";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_PowerPlatformRoleName.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[51] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_InternalBatteryType(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_InternalBatteryType.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_InternalBatteryType.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[52] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_InternalBatteryNumberOfCharges(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_InternalBatteryNumberOfCharges.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_InternalBatteryNumberOfCharges.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[53] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSVersion(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ComputerInfo).OsHardwareAbstractionLayer";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSVersion.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[54] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSArchitecture(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "echo %PROCESSOR_ARCHITECTURE%";
				string command = str + @" >> " + log_directory + "Census_OSArchitecture.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[55] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSBranch(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildBranch";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSBranch.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[56] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSBuildNumber(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = " (Get-WmiObject -class Win32_OperatingSystem).BuildNumber";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSBuildNumber.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[57] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSBuildRevision(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = " cmd.exe /c ver";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSBuildRevision.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[58] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSEdition(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = " (Get-ComputerInfo).WindowsEditionId";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSEdition.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[59] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSSkuName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ComputerInfo).WindowsEditionId";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSSkuName.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[60] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSInstallTypeName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_OSInstallTypeName.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSInstallTypeName.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[61] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSInstallLanguageIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_OSInstallLanguageIdentifier.txt" + " -ItemType file";
				//str = wmic os get oslanguage;
				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSInstallLanguageIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[62] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSUILocaleIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_OSUILocaleIdentifier.txt" + " -ItemType file";
				//str = wmic os get locale;
				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSUILocaleIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[63] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_OSWUAutoUpdateOptionsName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = " (new-object -com \"Microsoft.Update.AutoUpdate\").Settings.NotificationLevel";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_OSWUAutoUpdateOptionsName.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[64] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsPortableOperatingSystem(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-WmiObject Win32_Operatingsystem).PortableOperatingSystem";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsPortableOperatingSystem.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[65] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_GenuineStateName(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-CimInstance SoftwareLicensingProduct -Filter \"Name like 'Windows%'\" | where { $_.PartialProductKey }).GenuineStatus";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_GenuineStateName.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[66] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_ActivationChannel(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-CimInstance SoftwareLicensingProduct -Filter \"Name like 'Windows%'\" | where { $_.PartialProductKey }).ProductKeyChannel";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_ActivationChannel.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[67] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsFlightingInternal(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_IsFlightingInternal.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsFlightingInternal.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[68] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsFlightsDisabled(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").EnablePreviewBuilds";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsFlightsDisabled.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[69] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_FlightRing(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").Ring";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_FlightRing.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[70] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_ThresholdOptIn(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").ThresholdOptedin";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_ThresholdOptIn.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[71] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_FirmwareManufacturerIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_FirmwareManufacturerIdentifier.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_FirmwareManufacturerIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[72] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_FirmwareVersionIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_FirmwareVersionIdentifier.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_FirmwareVersionIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[73] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsSecureBootEnabled(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Census_IsSecureBootEnabled.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsSecureBootEnabled.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[74] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsWIMBootEnabled(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "dism.exe /Get-MountedWimInfo /English | Select-string \"Mounted images:\"";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsWIMBootEnabled.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[75] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsVirtualDevice(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(Get-MpComputerStatus).IsVirtualMachine";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsVirtualDevice.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[76] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsTouchEnabled(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "Get-PnpDevice | Where-Object {$_.FriendlyName -like '*touch screen*'}";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsTouchEnabled.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[77] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsPenCapable(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "Get-PnpDevice | Where-Object {$_.FriendlyName -like '*pen*'}";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsPenCapable.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[78] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Census_IsAlwaysOnAlwaysConnectedCapable(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "(get-wmiobject win32_SystemResources).\"Connect Standby Capable\"";
				string command = "powershell\n" + str + @" >> " + log_directory + "Census_IsAlwaysOnAlwaysConnectedCapable.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[79] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Wdft_IsGamer(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Wdft_IsGamer.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Wdft_IsGamer.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[80] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}
		public static void Wdft_RegionIdentifier(object obj)
		{
			GetValue gv = obj as GetValue;
			try
			{
				string str = "New-Item -Path " + log_directory + "Wdft_RegionIdentifier.txt" + " -ItemType file";

				string command = "powershell\n" + str + "\n";
				//string command = "powershell\n" + str + @" >> " + log_directory + "Wdft_RegionIdentifier.txt";
				Ex_cmd(command);
			}
			catch (Exception e)
			{
				Error_string[81] = e.ToString();
			}
			Monitor.Enter(gv);
			try
			{
				Complete_Count++;
			}
			finally
			{
				Monitor.Exit(gv);

			}
		}



	}


}
