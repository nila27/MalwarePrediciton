using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace OSS_Project_MP
{
    class EditCSV
    {
        static string log_directory = Program.Pre_Dir + @"log\" + Program.Date_Now + @"\";
        static string ML_path = Program.Pre_Dir + @"ML\";


        public static string[] feature_name = new string[88];
        public static string[] conver_str = new string[88];
        
        public static void CSV_Process()
        {
            Pre_work();
            Extract_data();
            Write_CSV();
            Report_CSV();
        }
        

        static void Pre_work() //check error log directory
        {
            DirectoryInfo ErrorDirectoryInfo = new DirectoryInfo(ML_path);
            if (ErrorDirectoryInfo.Exists == false)
            {
                ErrorDirectoryInfo.Create();
            }
        }

        static void Extract_data() //It is a code that converts extracted features for use in machine learning.
        {

            DirectoryInfo di = new DirectoryInfo(log_directory);
            var FI = new FileInfo[100];
            FI = di.GetFiles();
            string temp_str = "";
            string text_name = null;

            string[] temp_str_array = new string[10];

            int count = 0;
            double temp_double = 0;
            decimal de = 0;
            double temp_cal = 0;

            for (int i = 0; i < FI.Length; i++)
            {
                text_name = FI[i].ToString();
                var sr = new StreamReader(log_directory + text_name);
                try
                {
                    temp_str = sr.ReadToEnd();
                }
                catch (Exception e)
                {
                    GetValue.Error_string[83] = e.ToString();
                }

                switch (i)
                {


                    case 0:  // AppVersion //train중 가장 최신인 4.18.1809.2

                        temp_str_array = temp_str.Split('.');

                        if (int.Parse(temp_str_array[0]) > 4)
                        {
                            temp_str = "4.18.1809.2";
                        }
                        else if (int.Parse(temp_str_array[1]) > 18)
                        {
                            temp_str = "4.18.1809.2";
                        }
                        else if (int.Parse(temp_str_array[2]) > 1809)
                        {
                            temp_str = "4.18.1809.2";
                        }
                        else if (int.Parse(temp_str_array[3]) > 2)
                        {
                            temp_str = "4.18.1809.2";
                        }

                        conver_str[3] = temp_str;
                        feature_name[3] = "AppVersion";
                        break;
                    case 1:  //AutoSampleOptIn
                        conver_str[27] = temp_str;
                        feature_name[27] = "AutoSampleOptIn";
                        break;
                    case 2:  //AVProductsEnabled
                        foreach (char c in temp_str)
                        {
                            if (c == '\n')
                            {
                                count++;
                            }
                        }
                        conver_str[11] = count.ToString();
                        count = 0;
                        feature_name[11] = "AVProductsEnabled";
                        break;
                    case 3:  //AVProductsInstalled
                        foreach (char c in temp_str)
                        {
                            if (c == '\n')
                            {
                                count++;
                            }
                        }
                        conver_str[10] = count.ToString();
                        count = 0;
                        feature_name[10] = "AVProductsInstalled";
                        break;
                    case 4:  //AVProductStatesIdentifier  //가장 빈도 높은  53447
                        temp_str = "53447";
                        conver_str[9] = temp_str;
                        feature_name[9] = "AVProductStatesIdentifier";
                        break;
                    case 5:  //AvSigVersion  //가장 최신인 1.277.67.0
                        temp_str_array = temp_str.Split('.');

                        if (int.Parse(temp_str_array[0]) > 1)
                        {
                            temp_str = "1.277.67.0";
                        }
                        else if (int.Parse(temp_str_array[1]) > 277)
                        {
                            temp_str = "1.277.67.0";
                        }
                        else if (int.Parse(temp_str_array[2]) > 67)
                        {
                            temp_str = "1.277.67.0";
                        }
                        else if (int.Parse(temp_str_array[3]) > 0)
                        {
                            temp_str = "1.277.67.0";
                        }

                        conver_str[4] = temp_str;
                        feature_name[4] = "AvSigVersion";
                        break;
                    case 6:  //Census_ActivationChannel 
                        conver_str[67] = temp_str;
                        feature_name[67] = "Census_ActivationChannel";
                        break;
                    case 7:  //Census_ChassisTypeName 
                        conver_str[47] = temp_str;
                        feature_name[47] = "Census_ChassisTypeName";
                        break;
                    case 8:  //Census_DeviceFamily
                        if (temp_str.Contains("Client"))
                        {
                            temp_str = "Windows.Desktop";
                        }
                        else
                        {
                            temp_str = "Windows.Server";
                        }
                        conver_str[35] = temp_str;
                        feature_name[35] = "Census_DeviceFamily";
                        break;
                    case 9:  //Census_FirmwareManufacturerIdentifier   //매핑정보가 없기 때문에 빈칸
                        temp_str = "";

                        conver_str[72] = temp_str;
                        feature_name[72] = "Census_FirmwareManufacturerIdentifier";
                        break;
                    case 10:  //Census_FirmwareVersionIdentifier  //매핑정보가 없기 때문에 빈칸
                        temp_str = "";
                        conver_str[73] = temp_str;
                        feature_name[73] = "Census_FirmwareVersionIdentifier";
                        break;
                    case 11:  //Census_FlightRing  //값이 가장 많은 Retail
                        temp_str = "Retail";
                        conver_str[70] = temp_str;
                        feature_name[70] = "Census_FlightRing";
                        break;
                    case 12:  //Census_GenuineStateName
                        if (temp_str.Contains("0"))
                        {
                            temp_str = "IS_GENUINE";
                        }
                        else if (temp_str.Contains("1"))
                        {
                            temp_str = "INVALID_LICENSE";
                        }
                        else
                        {
                            temp_str = "Unknown";
                        }
                        conver_str[66] = temp_str;
                        feature_name[66] = "Census_GenuineStateName";
                        break;
                    case 13:  //Census_HasOpticalDiskDrive
                        if (temp_str == "True")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[45] = temp_str;
                        feature_name[45] = "Census_HasOpticalDiskDrive";
                        break;
                    case 14:  //Census_InternalBatteryNumberOfCharges //정확한 방도를 찾지 못해 빈칸으로 처리한다.
                        temp_str = "";
                        conver_str[53] = temp_str;
                        feature_name[53] = "Census_InternalBatteryNumberOfCharges";
                        break;
                    case 15:  //Census_InternalBatteryType  //정확한 방도를 찾지 못해 빈칸으로 처리한다.
                        temp_str = "";
                        conver_str[52] = temp_str;
                        feature_name[52] = "Census_InternalBatteryType";
                        break;
                    case 16:  //Census_InternalPrimaryDiagonalDisplaySizeInInches
                        temp_str_array = temp_str.Split('\n');
                        temp_double = Math.Round(double.Parse(temp_str_array[0]), 1);
                        temp_str = temp_double.ToString();
                        conver_str[48] = temp_str;
                        feature_name[48] = "Census_InternalPrimaryDiagonalDisplaySizeInInches";
                        break;
                    case 17:  //Census_InternalPrimaryDisplayResolutionHorizontal
                        conver_str[49] = temp_str;
                        feature_name[49] = "Census_InternalPrimaryDisplayResolutionHorizontal";
                        break;
                    case 18:  //Census_InternalPrimaryDisplayResolutionVertical
                        conver_str[50] = temp_str;
                        feature_name[50] = "Census_InternalPrimaryDisplayResolutionVertical";
                        break;
                    case 19:  //Census_IsAlwaysOnAlwaysConnectedCapable
                        if (temp_str == string.Empty)
                        {
                            temp_str = "0";
                        }
                        else
                        {
                            temp_str = "1";
                        }
                        conver_str[79] = temp_str;
                        feature_name[79] = "Census_IsAlwaysOnAlwaysConnectedCapable";
                        break;
                    case 20:  //Census_IsFlightingInternal //방법을 찾지 못해 빈칸
                        temp_str = "";
                        conver_str[68] = temp_str;
                        feature_name[68] = "Census_IsFlightingInternal";
                        break;
                    case 21:  //Census_IsFlightsDisabled
                        if (temp_str == string.Empty)
                        {
                            temp_str = "NA";
                        }
                        conver_str[69] = temp_str;
                        feature_name[69] = "Census_IsFlightsDisabled";
                        break;
                    case 22:  //Census_IsPenCapable
                        if (temp_str == "True")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[78] = temp_str;
                        feature_name[78] = "Census_IsPenCapable";
                        break;
                    case 23:  //Census_IsPortableOperatingSystem
                        if (temp_str == "True")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[65] = temp_str;
                        feature_name[65] = "Census_IsPortableOperatingSystem";
                        break;
                    case 24:  //Census_IsSecureBootEnabled
                        if (temp_str == "True")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[74] = temp_str;
                        feature_name[74] = "Census_IsSecureBootEnabled";
                        break;
                    case 25:  //Census_IsTouchEnabled
                        if (temp_str == "True")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[77] = temp_str;
                        feature_name[77] = "Census_IsTouchEnabled";
                        break;
                    case 26:  //Census_IsVirtualDevice
                        if (temp_str == "True")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[76] = temp_str;
                        feature_name[76] = "Census_IsVirtualDevice";
                        break;
                    case 27:  //Census_IsWIMBootEnabled    
                        temp_str_array = temp_str.Split(':');
                        temp_str = temp_str_array[1];
                        if (temp_str.Contains("\n"))
                        {
                            temp_str = "NA";
                        }
                        else if (temp_str.Contains("1"))
                        {
                            temp_str = "1";
                        }
                        else if (temp_str.Contains("0"))
                        {
                            temp_str = "0";
                        }
                        conver_str[75] = temp_str;
                        feature_name[75] = "Census_IsWIMBootEnabled";
                        break;
                    case 28:  //Census_MDC2FormFactor //정확한 feature를 찾지못해, 실험환경을 Desktop이라 가정 후 Desktop으로 무조건 대입한다. devicefamily나 chassistypename등에 사용한 명령어를 사용해 비슷하게 판단 할 수 있으나, 정확한 명령어라 판단이 안되기에 Desktop을 대입
                        temp_str = "Desktop";
                        conver_str[34] = temp_str;
                        feature_name[34] = "Census_MDC2FormFactor";
                        break;
                    case 29:  //Census_OEMModelIdentifier   //매핑값을 찾지못해서 빈칸으로 넣는다.
                        temp_str = "";
                        conver_str[37] = temp_str;
                        feature_name[37] = "Census_OEMModelIdentifier";
                        break;
                    case 30:  //Census_OEMNameIdentifier //매핑값을 찾지못해서 빈칸으로 넣는다.
                        temp_str = "";
                        conver_str[36] = temp_str;
                        feature_name[36] = "Census_OEMNameIdentifier";
                        break;
                    case 31:  //Census_OSArchitecture
                        conver_str[55] = temp_str;
                        feature_name[55] = "Census_OSArchitecture";
                        break;
                    case 32:  //Census_OSBranch
                        temp_str_array = temp_str.Split('_');
                        if (temp_str_array[0].Contains("19h1"))
                        {
                            temp_str_array[0] = "rs5";
                        }
                        temp_str = temp_str_array[0] + "_" + temp_str_array[1];
                        conver_str[56] = temp_str;
                        feature_name[56] = "Census_OSBranch";
                        break;
                    case 33:  //Census_OSBuildNumber   //최신버전이18242
                        if (int.Parse(temp_str) >= 18242)
                        {
                            temp_str = "18242";
                        }
                        conver_str[57] = temp_str;
                        feature_name[57] = "Census_OSBuildNumber";
                        break;
                    case 34:  //Census_OSBuildRevision   // 최신버전이 train 데이터에 없을 수 도 있기 때문에 랜덤값인 228로  치환한다.
                        temp_str_array = temp_str.Split('.');
                        temp_str = temp_str_array[3].Replace("]", "").Trim();



                        temp_str = "228";
                        conver_str[58] = temp_str;
                        feature_name[58] = "Census_OSBuildRevision";
                        break;
                    case 35:  //Census_OSEdition
                        conver_str[59] = temp_str;
                        feature_name[59] = "Census_OSEdition";
                        break;
                    case 36:  //Census_OSInstallLanguageIdentifier   //매핑값이 없어서 빈칸으로
                        temp_str = "";
                        conver_str[62] = temp_str;
                        feature_name[62] = "Census_OSInstallLanguageIdentifier";
                        break;
                    case 37:  //Census_OSInstallTypeName           //방법을 찾지 못해 Upgrade로 치환
                        temp_str = "Upgrade";
                        conver_str[61] = temp_str;
                        feature_name[61] = "Census_OSInstallTypeName";
                        break;
                    case 38:  //Census_OSSkuName
                        temp_str = temp_str.ToUpper();
                        conver_str[60] = temp_str;
                        feature_name[60] = "Census_OSSkuName";
                        break;
                    case 39:  //Census_OSUILocaleIdentifier //매핑값이 없어서 랜덤값인 31로 치환한다
                        temp_str = "31";
                        conver_str[63] = temp_str;
                        feature_name[63] = "Census_OSUILocaleIdentifier";
                        break;
                    case 40:  //Census_OSVersion  //train 중 가장 최신값인 10.0.18242.1000으로 치환한다.
                        temp_str_array = temp_str.Split('.');

                        if (int.Parse(temp_str_array[0]) > 10)
                        {
                            temp_str = "10.0.18242.1000";
                        }
                        else if (int.Parse(temp_str_array[1]) > 0)
                        {
                            temp_str = "10.0.18242.1000";
                        }
                        else if (int.Parse(temp_str_array[2]) > 18242)
                        {
                            temp_str = "10.0.18242.1000";
                        }
                        else if (int.Parse(temp_str_array[3]) > 1000)
                        {
                            temp_str = "10.0.18242.1000";
                        }
                        conver_str[54] = temp_str;
                        feature_name[54] = "Census_OSVersion";
                        break;
                    case 41:  //Census_OSWUAutoUpdateOptionsName
                        switch (int.Parse(temp_str))
                        {
                            case 1:
                                temp_str = "UNKNOWN";
                                break;
                            case 2:
                                temp_str = "Notify";
                                break;
                            case 3:
                                temp_str = "FullAuto";
                                break;
                            case 4:
                                temp_str = "AutoInstallAndRebootAtMaintenanceTime";
                                break;
                            case 5:
                                temp_str = "DownloadNotify";
                                break;
                            case 6:
                                temp_str = "Off";
                                break;
                        }
                        conver_str[64] = temp_str;
                        feature_name[64] = "Census_OSWUAutoUpdateOptionsName";
                        break;
                    case 42:  //Census_PowerPlatformRoleName
                        conver_str[51] = temp_str;
                        feature_name[51] = "Census_PowerPlatformRoleName";
                        break;
                    case 43:   //Census_PrimaryDiskTotalCapacity
                        temp_cal = double.Parse(temp_str) / 1048576;
                        temp_cal = Math.Round(temp_cal);
                        temp_str = temp_cal.ToString();
                        conver_str[42] = temp_str;
                        feature_name[42] = "Census_PrimaryDiskTotalCapacity";
                        break;
                    case 44:  //Census_PrimaryDiskTypeName
                        conver_str[43] = temp_str;
                        feature_name[43] = "Census_PrimaryDiskTypeName";
                        break;
                    case 45:  //Census_ProcessorClass //정확한 매핑값이 없고 대부분이 Blank이기 때문에 Blank로 대입
                        conver_str[41] = "";
                        feature_name[41] = "Census_ProcessorClass";
                        break;
                    case 46:  //Census_ProcessorCoreCount
                        conver_str[38] = temp_str;
                        feature_name[38] = "Census_ProcessorCoreCount";
                        break;
                    case 47:  //Census_ProcessorManufacturerIdentifier  //매핑값을 찾지못해서 빈칸으로 넣는다.
                        temp_str = "";
                        conver_str[39] = temp_str;
                        feature_name[39] = "Census_ProcessorManufacturerIdentifier";
                        break;
                    case 48:  //Census_ProcessorModelIdentifier//매핑값을 찾지못해서 빈칸으로 넣는다.
                        temp_str = "";
                        conver_str[40] = temp_str;
                        feature_name[40] = "Census_ProcessorModelIdentifier";
                        break;
                    case 49:  //Census_SystemVolumeTotalCapacity
                        temp_cal = double.Parse(temp_str) / 1048576;
                        temp_cal = Math.Round(temp_cal);
                        temp_str = temp_cal.ToString();
                        conver_str[44] = temp_str;
                        feature_name[44] = "Census_SystemVolumeTotalCapacity";
                        break;
                    case 50:  //Census_ThresholdOptIn
                        if (temp_str == string.Empty)
                        {
                            temp_str = "NA";
                        }
                        conver_str[71] = temp_str;
                        feature_name[71] = "Census_ThresholdOptIn";
                        break;
                    case 51:  //Census_TotalPhysicalRAM
                        de = decimal.Parse(temp_str) / 1048576;
                        de = Math.Round(de) * 1024;
                        temp_str = de.ToString();
                        conver_str[46] = temp_str;
                        feature_name[46] = "Census_TotalPhysicalRAM";
                        break;
                    case 52: //CityIdentifier  //train 값들 중 랜덤인 1181
                        temp_str = "1181";
                        conver_str[14] = temp_str;
                        feature_name[14] = "CityIdentifier";
                        break;
                    case 53:   //CountryIdentifier
                        conver_str[13] = temp_str;
                        feature_name[13] = "CountryIdentifier";
                        break;
                    case 54:  //DefaultBrowsersIdentifier // 아직 못찾음
                        temp_str = "";
                        conver_str[8] = temp_str;
                        feature_name[8] = "DefaultBrowsersIdentifier";
                        break;
                    case 55:  //EngineVersion  //train 중 가장 최신인1.1.15300.6

                        temp_str_array = temp_str.Split('.');

                        if (int.Parse(temp_str_array[0]) > 1)
                        {
                            temp_str = "1.1.15300.6";
                        }
                        else if (int.Parse(temp_str_array[1]) > 1)
                        {
                            temp_str = "1.1.15300.6";
                        }
                        else if (int.Parse(temp_str_array[2]) > 15300)
                        {
                            temp_str = "1.1.15300.6";
                        }
                        else if (int.Parse(temp_str_array[3]) > 6)
                        {
                            temp_str = "1.1.15300.6";
                        }
                        conver_str[2] = temp_str;
                        feature_name[2] = "EngineVersion";
                        break;
                    case 56:  //Firewall
                        if (temp_str.Contains("True"))
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[32] = temp_str;
                        feature_name[32] = "Firewall";
                        break;
                    case 57:  //GeoNameIdentifier  //train값중 랜덤인 211
                        temp_str = "211";
                        conver_str[16] = temp_str;
                        feature_name[16] = "GeoNameIdentifier";
                        break;
                    case 58:  //HasTpm
                        if (temp_str == "True")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[12] = temp_str;
                        feature_name[12] = "HasTpm";
                        break;
                    case 59:  //IeVerIdentifier  //train 중 가장 빈도가 높은 137을 대입
                        temp_str = "137";
                        conver_str[30] = temp_str;
                        feature_name[30] = "IeVerIdentifier";
                        break;
                    case 60:  //IsBeta // 아직 못찾음 //대중값 0
                        temp_str = "0";
                        conver_str[5] = temp_str;
                        feature_name[5] = "IsBeta";
                        break;
                    case 61:  //IsProtected
                        foreach (char c in temp_str)
                        {
                            if (c == '\n')
                            {
                                count++;
                            }
                        }
                        conver_str[26] = count.ToString();
                        count = 0;
                        feature_name[26] = "IsProtected";
                        break;
                    case 62:  //IsSxsPassiveMode
                        if (temp_str.Contains("4"))
                        {
                            temp_str = "0";
                        }
                        else
                        {
                            temp_str = "1";
                        }
                        conver_str[7] = temp_str;
                        feature_name[7] = "IsSxsPassiveMode";
                        break;
                    case 63:  //LocaleEnglishNameIdentifier
                        conver_str[17] = temp_str;
                        feature_name[17] = "LocaleEnglishNameIdentifier";
                        break;
                    case 64:  //MachineIdentifier
                        temp_str = "User_Desktop";
                        conver_str[0] = temp_str;
                        feature_name[0] = "MachineIdentifier";
                        break;
                    case 65:  //OrganizationIdentifier  //27
                        temp_str = "27";
                        conver_str[15] = temp_str;
                        feature_name[15] = "OrganizationIdentifier";
                        break;
                    case 66:  // OsBuild  //최신버전이18242
                        if (int.Parse(temp_str) >= 18242)
                        {
                            temp_str = "18242";
                        }
                        conver_str[21] = temp_str;
                        feature_name[21] = "OsBuild";
                        break;
                    case 67:  //OsBuildLab  //OsBuildLab 계속 바뀌기 때문에 train 중 prereleased 버전이 아닌 release 버전중에 가장최신이라 판단되는 17763.1.amd64fre.rs5_release.180914-1434를 대입한다.
                        temp_str_array = temp_str.Split('.');
                        if (int.Parse(temp_str_array[0]) > 17763)
                        {

                            if (temp_str.Contains("19h1"))
                            {
                                temp_str = "17763.1.amd64fre.rs5_release.180914-1434";
                            }
                        }
                        conver_str[24] = temp_str;
                        feature_name[24] = "OsBuildLab";
                        break;
                    case 68:  //OsPlatformSubRelease //OsPlatformSubRelease는 계속 바뀌기 때문에 rs4 이후 버전들은 기존에 존재하던 data 중 가장 최신인 rs4로 치환한다.
                        temp_str_array = temp_str.Split('_');
                        temp_str = temp_str_array[0];
                        if (temp_str.Contains("h1"))
                        {
                            temp_str = "rs4";
                        }
                        conver_str[23] = temp_str;
                        feature_name[23] = "OsPlatformSubRelease";
                        break;
                    case 69:  //OsSuite
                        conver_str[22] = temp_str;
                        feature_name[22] = "OsSuite";
                        break;
                    case 70:  //OsVer     //Osver는 계속 바뀌고, 최신버전이 어떤것인지 판단하기 힘들기 때문에 기존에 존재하던 data 중 가장 많은 10.0.0.0으로 치환한다. 
                        temp_str_array = temp_str.Split('.');
                        if (temp_str_array[0] == "10")
                        {
                            //temp_str = "10.0.0.0";
                        }
                        conver_str[20] = temp_str;
                        feature_name[20] = "OsVer";
                        break;
                    case 71:  //Platform
                        if (temp_str.Contains("10"))
                        {
                            temp_str = "Windows10";
                        }
                        else if (temp_str.Contains("8"))
                        {
                            temp_str = "Windows8";
                        }
                        else if (temp_str.Contains("7"))
                        {
                            temp_str = "Windows7";
                        }
                        else
                            temp_str = "Windows2016";
                        {

                        }
                        conver_str[18] = temp_str;
                        feature_name[18] = "Platform";
                        break;
                    case 72:  //Processor
                        if (temp_str.Contains("64"))
                        {
                            temp_str = "x64";
                        }
                        else
                        {
                            temp_str = "x86";
                        }
                        conver_str[19] = temp_str;
                        feature_name[19] = "Processor";
                        break;
                    case 73:  //ProductName
                        if (temp_str.Contains("7"))
                        {
                            temp_str = "mse";
                        }
                        else
                        {
                            temp_str = "win8defender";
                        }
                        conver_str[1] = temp_str;
                        feature_name[1] = "ProductName";
                        break;
                    case 74:  //PuaMode
                        if (temp_str == "1")
                        {
                            temp_str = "On";
                        }
                        else if (temp_str == "2")
                        {
                            temp_str = "Audit Mode";
                        }
                        else
                        {
                            temp_str = "";
                        }
                        conver_str[28] = temp_str;
                        feature_name[28] = "PuaMode";
                        break;
                    case 75:  //RtpStateBitfield    //아직 못찾음 //대중값 7
                        temp_str = "7";
                        conver_str[6] = temp_str;
                        feature_name[6] = "RtpStateBitfield";
                        break;
                    case 76:  //SkuEdition   
                        temp_str_array = temp_str.Split(' ');
                        temp_str = temp_str_array[3];
                        conver_str[25] = temp_str;
                        feature_name[25] = "SkuEdition";
                        break;
                    case 77:  //SmartScreen
                        conver_str[31] = temp_str;
                        feature_name[31] = "SmartScreen";
                        break;
                    case 78:  //SMode 
                        temp_str_array = temp_str.Split(' ');
                        if (temp_str_array[3] == "S")
                        {
                            temp_str = "1";
                        }
                        else
                        {
                            temp_str = "0";
                        }
                        conver_str[29] = temp_str;
                        feature_name[29] = "SMode";
                        break;
                    case 79:  //UacLuaenable
                        conver_str[33] = temp_str;
                        feature_name[33] = "UacLuaenable";
                        break;
                    case 80:  //Wdft_IsGamer  //방법을 찾지 못해 빈칸
                        temp_str = " ";
                        conver_str[80] = temp_str;
                        feature_name[80] = "Wdft_IsGamer";
                        break;
                    case 81: //Wdft_RegionIdentifier //방법을 찾지 못해 빈칸
                        temp_str = " ";
                        conver_str[81] = temp_str;
                        feature_name[81] = "Wdft_RegionIdentifier";
                        break;
                }

            }


        }

        static void Write_CSV() //Write the data convert on the csv file.
        {
            string csv_path = ML_path + "Extract_data.csv";
            StreamWriter sw = new StreamWriter(csv_path);
            for (int i = 0; i < 82; i++)
            {

                if(i!= 81)
                {

                    sw.Write("{0},{1}", feature_name[i], "");
                    sw.Flush();
                }
                else
                {
                    sw.WriteLine(feature_name[i]);
                }

            }

            for (int i = 0; i < 82; i++)
            {
                if (conver_str[i] == null)
                {

                }
                else
                {
                    
                    if (i != 81)
                    {

                        sw.Write("{0},{1}", conver_str[i].Trim(), ""); ;
                        sw.Flush();
                    }
                    else
                    {
                        sw.WriteLine(conver_str[i].Trim());
                    }

                }
            }
            sw.Close();
        }


        static void Report_CSV() //Files required for machine running operations
        {
            string csv_path = ML_path + "Report.csv";
            StreamWriter sw = new StreamWriter(csv_path);
            sw.WriteLine("{0},{1}", "MachineIdentifier", "HasDetections");
            sw.Write("{0},{1}", "User_Desktop", "0.5");
            sw.Flush();


            sw.Close();
        }

    }
}
