using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Collections.Generic;


namespace MalwarePrediction
{
    class ExtractValue
    {
		public static void ExtractValueProcess()
        {
			var taskList = new List<Task>();
			Task[] taskArray;

			taskList.Add(Task.Run(() => GetValueByCMD()));
			taskList.Add(Task.Run(() => GetValueByPrePS()));
			taskList.Add(Task.Run(() => GetValueByPS()));
			taskList.Add(Task.Run(() => GetValueByPSTwice()));
			taskList.Add(Task.Run(() => GetValueAddedLater()));

			taskArray = taskList.ToArray();
			Task.WaitAll(taskArray);
		}
		static bool MakeEmptyFile(string filename)
		{
			string exCommand = "";
			try
			{
				exCommand = "powershell\n" + "New-Item -Path " + Program.gLogDirectory + filename + " -ItemType file" + "\n";
				Ex_cmd(exCommand);
			}
			catch (Exception e)
			{
				return false;
			}
			return true;
		}


		static bool PreGetPSValue(string precommand, string command, string filename)
		{
			string exCommand = "";
			try
			{
				exCommand = "powershell\n" + command + @" >> " + Program.gLogDirectory + filename;
				Ex_cmd(precommand);
				Ex_cmd(exCommand);
			}
			catch (Exception e)
			{
				return false;
			}
			return true;

		}
		static bool GetCMDValue(string command, string filename)
		{
			string exCommand = "";
			try
			{
				exCommand = command + @" >> " + Program.gLogDirectory + filename;
				Ex_cmd(exCommand);
			}
			catch (Exception e)
			{
				return false;
			}
			return true;
		}
		static bool GetPSValue(string command, string filename)
		{
			string exCommand = "";
			try
			{
				exCommand = "powershell\n" + command + @" >> " + Program.gLogDirectory + filename;
				Ex_cmd(exCommand);
			}
			catch (Exception e)
			{
				return false;
			}
			return true;
		}

		static bool GetPSValueTwice(string command1, string command2part1, string command2part2, string filename)
		{
			string exCommand = "";
			string str_value = "";

			try
			{
				exCommand = "powershell\n" + command1 + @" >> " + Program.gLogDirectory + filename;
				Ex_cmd(exCommand);
				str_value = File.ReadAllText(Program.gLogDirectory + filename).Trim();
				exCommand = "powershell\n" + command2part1 + str_value + command2part2 + @" >> " + Program.gLogDirectory + filename;
				Ex_cmd(exCommand);
				File.Delete(Program.gLogDirectory + filename);
			}
			catch (Exception e)
			{
				return false;
			}

			return true;
		}

		static bool GetPSValue(string command1part1, string command1part2, string command1part3, string filename)
		{
			string exCommand = "";

			try
			{
				exCommand = "powershell\n" + command1part1 + command1part2 + command1part3 + @" >> " + Program.gLogDirectory + filename + "\n";
				Ex_cmd(exCommand);
			}
			catch (Exception e)
			{
				return false;
			}

			return true;
		}


		static void GetValueByCMD()
		{
			var taskList = new List<Task>();
			Task[] taskArray;
			taskList.Add(Task.Run(() => GetCMDValue("sc query Windefend | find /i \"RUNNING\"", "IsSxsPassiveMode.txt")));
			taskList.Add(Task.Run(() => GetCMDValue("echo %PROCESSOR_ARCHITECTURE%", "Census_OSArchitecture.txt")));


			taskArray = taskList.ToArray();
			Task.WaitAll(taskArray);

		}
		static void GetValueByPrePS()
		{
			var taskList = new List<Task>();
			Task[] taskArray;

			taskList.Add(Task.Run(() => PreGetPSValue("sc start windefend enable\n\n", "(Get-MpComputerStatus).AMEngineVersion |Select -First 1", "EngineVersion.txt")));
			taskList.Add(Task.Run(() => PreGetPSValue("sc start windefend enable\n\n", "(Get-MpComputerStatus).AMProductVersion |Select -First 1", "AppVersion.txt")));
			taskList.Add(Task.Run(() => PreGetPSValue("sc start windefend enable\n\n", "(Get-MpComputerStatus).AntispywareSignatureVersion |Select -First 1", "AvSigVersion.txt")));


			taskArray = taskList.ToArray();
			Task.WaitAll(taskArray);
		}
		static void GetValueByPS()
		{
			var taskList = new List<Task>();
			Task[] taskArray;

			//taskList.Add(Task.Run(() => ));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).WindowsProductName", "ProductName.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).displayName", "AVProductsInstalled.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).productState", "AVProductsEnabled.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-Tpm).Tpmready", "HasTpm.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WmiObject win32_operatingsystem).CountryCode", "CountryIdentifier.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WinHomeLocation).GeoId", "LocaleEnglishNameIdentifier.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).WindowsProductName", "Platform.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).OsArchitecture", "Processor.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-wmiobject win32_operatingsystem).Version", "OsVer.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).OsBuildNumber", "OsBuild.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-wmiobject win32_operatingsystem).OSProductSuite", "OsSuite.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildBranch", "OsPlatformSubRelease.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildLabEx", "OsBuildLab.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-wmiobject win32_operatingsystem).Caption", "SkuEdition.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct).productState", "IsProtected.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-MpPreference).SubmitSamplesConsent", "AutoSampleOptIn.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-MpPreference).PUAProtection", "PuaMode.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-wmiobject win32_operatingsystem).Caption", "SMode.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer).SmartScreenEnabled", "SmartScreen.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-NetFirewallProfile -Profile private).Enabled", "Firewall.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System).EnableLUA", "UacLuaenable.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").InstallationType", "Census_DeviceFamily.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WmiObject Win32_Processor).numberoflogicalprocessors", "Census_ProcessorCoreCount.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-Wmiobject Win32_Processor).Manufacturer", "Census_ProcessorManufacturerIdentifier.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-Wmiobject Win32_Processor).Name", "Census_ProcessorModelIdentifier.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(get-wmiObject win32_processor).Name", "Census_ProcessorClass.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-Disk | Where-Object IsSystem -eq $True).AllocatedSize", "Census_PrimaryDiskTotalCapacity.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WmiObject win32_operatingsystem).totalvisibleMemorysize", "Census_TotalPhysicalRAM.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WmiObject win32_videocontroller).CurrentHorizontalResolution", "Census_InternalPrimaryDisplayResolutionHorizontal.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WmiObject win32_videocontroller).CurrentVerticalResolution", "Census_InternalPrimaryDisplayResolutionVertical.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).PowerPlatformRole", "Census_PowerPlatformRoleName.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).OsHardwareAbstractionLayer", "Census_OSVersion.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\").BuildBranch", "Census_OSBranch.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WmiObject -class Win32_OperatingSystem).BuildNumber", "Census_OSBuildNumber.txt")));
			taskList.Add(Task.Run(() => GetPSValue("cmd.exe /c ver", "Census_OSBuildRevision.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).WindowsEditionId", "Census_OSEdition.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ComputerInfo).WindowsEditionId", "Census_OSSkuName.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(new-object -com \"Microsoft.Update.AutoUpdate\").Settings.NotificationLevel", "Census_OSWUAutoUpdateOptionsName.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-WmiObject Win32_Operatingsystem).PortableOperatingSystem", "Census_IsPortableOperatingSystem.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-CimInstance SoftwareLicensingProduct -Filter \"Name like 'Windows%'\" | where { $_.PartialProductKey }).GenuineStatus", "Census_GenuineStateName.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-CimInstance SoftwareLicensingProduct -Filter \"Name like 'Windows%'\" | where { $_.PartialProductKey }).ProductKeyChannel", "Census_ActivationChannel.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").EnablePreviewBuilds", "Census_IsFlightsDisabled.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").Ring", "Census_FlightRing.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-ItemProperty -Path Registry::\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsSelfHost\\Applicability\").ThresholdOptedin", "Census_ThresholdOptIn.txt")));
			taskList.Add(Task.Run(() => GetPSValue("dism.exe /Get-MountedWimInfo /English | Select-string \"Mounted images:\"", "Census_IsWIMBootEnabled.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(Get-MpComputerStatus).IsVirtualMachine", "Census_IsVirtualDevice.txt")));
			taskList.Add(Task.Run(() => GetPSValue("Get-PnpDevice | Where-Object {$_.FriendlyName -like '*touch screen*'}", "Census_IsTouchEnabled.txt")));
			taskList.Add(Task.Run(() => GetPSValue("Get-PnpDevice | Where-Object {$_.FriendlyName -like '*pen*'}", "Census_IsPenCapable.txt")));
			taskList.Add(Task.Run(() => GetPSValue("(get-wmiobject win32_SystemResources).\"Connect Standby Capable\"", "Census_IsAlwaysOnAlwaysConnectedCapable.txt")));

			taskList.Add(Task.Run(() => GetPSValue("function chasis{ $ArrChaType = \"Other\",\"Unknown\" ,\"Desktop\",\"LowProfileDesktop\",\"PizzaBox\" ,\"MiniTower\",\"Tower\",\"Portable\",\"Laptop\",\"Notebook\",\"HandHeld\",\"DockingStation\",\"AllinOne\",\"SubNotebook\",\"Spacesaving\",\"LunchBox\",\"MainServerChassis\",\"ExpansionChassis\",\"SubChassis\",",
				"\"BusExpansionChassis\",\"PeripheralChassis\",\"RAIDChassis\",\"RackMountChassis\",\"SealedcasePC\",\"Multisystemchassis\",\"CompactPCI\",\"AdvancedTCA\",\"Blade\",\"BladeEnclosure\",\"Tablet\",\"Convertible\",\"Detachable\",\"ioTGateway\",\"EmbeddedPC\",\"MiniPC\",\"StickPC\"\n",
				"$chaType = (Get-CimInstance -ClassName Win32_SystemEnclosure).ChassisTypes\n" + "for ($i=0; $i -lt 37; $i++) { if ($chaType -eq $i+1){$ArrChaType[$i]}}}\n" + "chasis",
				"Census_ChassisTypeName.txt"
				)));
			taskList.Add(Task.Run(() => GetPSValue("function get-monitorsize {Get-WmiObject -Namespace root\\wmi -Class WmiMonitorBasicDisplayParams |select  @{N=\"Computer\"; E={$_.__SERVER}},InstanceName,@{N=\"Horizonal\";\r\n",
				"E={[System.Math]::Round(($_.MaxHorizontalImageSize/2.54), 2)}},@{N=\"Vertical\"; E={[System.Math]::Round(($_.MaxVerticalImageSize/2.54), 2)}},@{N=\"Size\"; E={[System.Math]::Round(([System.Math]::Sqrt([System.Math]::Pow($_.MaxHorizontalImageSize, 2) `\r\n",
				"+ [System.Math]::Pow($_.MaxVerticalImageSize, 2))/2.54),2)}}}\n" + "\n" + "(get-monitorsize).Size",
				"Census_InternalPrimaryDiagonalDisplaySizeInInches.txt"
				)));


			taskArray = taskList.ToArray();
			Task.WaitAll(taskArray);


		}


		static void GetValueByPSTwice()
		{
			var taskList = new List<Task>();
			Task[] taskArray;

			taskList.Add(Task.Run(() => GetPSValueTwice("(Get-Disk | Where-Object IsSystem -eq $True).number", "(Get-PhysicalDisk | Where-Object DeviceId -eq ", " ).Mediatype", "Census_PrimaryDiskTypeName.txt")));
			taskList.Add(Task.Run(() => GetPSValueTwice("(Get-Partition | Where-Object Isboot -eq True).DriveLetter", "(Get-Partition -DriveLetter ", ").size", "Census_SystemVolumeTotalCapacity.txt")));

			taskArray = taskList.ToArray();
			Task.WaitAll(taskArray);
		}
		static void GetValueAddedLater()
		{
			var taskList = new List<Task>();
			Task[] taskArray;

			taskList.Add(Task.Run(() => MakeEmptyFile("MachineIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("IsBeta.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("RtpStateBitfield.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("DefaultBrowsersIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("AVProductStatesIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("CityIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("OrganizationIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("GeoNameIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("IeVerIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_MDC2FormFactor.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_OEMNameIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_OEMModelIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_HasOpticalDiskDrive.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_InternalBatteryType.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_InternalBatteryNumberOfCharges.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_OSInstallTypeName.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_OSInstallLanguageIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_OSUILocaleIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_IsFlightingInternal.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_FirmwareManufacturerIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_FirmwareVersionIdentifier.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Census_IsSecureBootEnabled.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Wdft_IsGamer.txt")));
			taskList.Add(Task.Run(() => MakeEmptyFile("Wdft_RegionIdentifier.txt")));

			taskArray = taskList.ToArray();
			Task.WaitAll(taskArray);
		}

























		public static void Ex_cmd(string str) //excute cmd
		{
			ProcessStartInfo proinfo = new ProcessStartInfo();
			Process pro = new Process();
			string str_ret = "";
			try
			{
				proinfo.FileName = @"cmd";
				proinfo.CreateNoWindow = true;
				proinfo.UseShellExecute = false;
				proinfo.RedirectStandardOutput = true;
				proinfo.RedirectStandardInput = true;
				proinfo.RedirectStandardError = true;
				proinfo.Verb = "runas";
				pro.StartInfo = proinfo;
				pro.Start();


				pro.StandardInput.Write(str);
				pro.StandardInput.Write(Environment.NewLine);
				pro.StandardInput.Close();

				str_ret = pro.StandardOutput.ReadToEnd();
				Console.WriteLine(str_ret);
				pro.WaitForExit();
				pro.Close();


			}
			catch (Exception e)
			{

			}
		}




	}




}
